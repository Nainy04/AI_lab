# -*- coding: utf-8 -*-
"""Lab_3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VXvp94Vqfd8FsxCx8KOnU1vN_87HJO_O
"""

from collections import deque

"""we have a graph in form of a dictionarry.

it is undirected

"""

pakistan_cities = {
    'Karachi': ['Hyderabad'],
    'Hyderabad': ['Karachi', 'Sukkur'],
    'Sukkur': ['Hyderabad', 'Multan', 'Quetta'],
    'Multan': ['Sukkur', 'Lahore'],
    'Quetta': ['Sukkur'],
    'Lahore': ['Multan', 'Islamabad'],
    'Islamabad': ['Lahore', 'Peshawar'],
    'Peshawar': ['Islamabad']
}

"""we create two funcitons for bsf and dfs

 breath first search and depth first search

 to the fucntion we pass the graph which we are treversing , the root node from where it starts and the goal node or the target
"""

def bfs(graph, root, goal):
    visited = []
    queue = deque([root])
    while queue:
        node = queue.popleft()
        visited.append(node)
        if node == goal:
            return visited
        for neighbour in graph[node]:

          if neighbour not in visited:
            queue.append(neighbour)

    print("the goal is not found")
    return visited

"""depth first search"""

def dfs(graph, root, goal):
    visited = []
    stack = [root]
    while stack:
        node = stack.pop()
        visited.append(node)
        if node == goal:
            return visited
        for neighbour in graph[node]:
            if neighbour not in visited:
                stack.append(neighbour)

bfs_path = bfs(pakistan_cities, 'Karachi', 'Peshawar')
dfs_path = dfs(pakistan_cities, 'Karachi', 'Peshawar')

print(bfs_path)
print(dfs_path)

